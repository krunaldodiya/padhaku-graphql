type Mutation {
    login(
        username: String! @rules(apply: ["required", "min:8"])
        password: String! @rules(apply: ["required", "min:8"])
    ): Auth!

    register(
        country_id: ID! @rules(apply: ["required"])
        mobile: String! @rules(apply: ["required", "numeric", "unique:users"])
        name: String! @rules(apply: ["required", "min:5"])
        username: String!
            @rules(apply: ["required", "alpha_dash", "unique:users", "min:8"])
        password: String! @rules(apply: ["required", "min:8"])
    ): Auth!

    requestOtp(
        country_id: ID! @rules(apply: ["required"])
        mobile: String! @rules(apply: ["required", "numeric"])
        type: String! @rules(apply: ["required"])
    ): String!

    verifyOtp(
        country_id: ID! @rules(apply: ["required"])
        mobile: String! @rules(apply: ["required", "numeric"])
        otp: Int! @rules(apply: ["required", "numeric"])
    ): Boolean!

    resetPassword(
        country_id: ID! @rules(apply: ["required"])
        mobile: String! @rules(apply: ["required", "numeric"])
        password: String! @rules(apply: ["required", "min:8"])
    ): Boolean!

    editProfile(
        name: String @rules(apply: ["min:5"])
        email: String @rules(apply: ["email"])
        dob: String
        gender: String
        language: String
        avatar: String
        bio: String
    ): User! @middleware(checks: ["auth:api"])

    startQuiz(quiz_id: ID! @rules(apply: ["required"])): Boolean!
        @middleware(checks: ["auth:api"])

    joinQuiz(quiz_id: ID! @rules(apply: ["required"])): Quiz!
        @middleware(checks: ["auth:api"])
        @field(resolver: "App\\GraphQL\\Mutations\\QuizMutation@joinQuiz")

    submitQuiz(
        quiz_id: ID! @rules(apply: ["required"])
        meta: [QuizMetaInput!]! @rules(apply: ["required"])
    ): Boolean! @middleware(checks: ["auth:api"])

    withdrawMoney(
        gateway: String! @rules(apply: ["required"])
        mobile: String! @rules(apply: ["required", "numeric"])
        amount: String! @rules(apply: ["required", "numeric"])
    ): Boolean! @middleware(checks: ["auth:api"])

    generatePaytmChecksum(
        checksum: ChecksumInput! @rules(apply: ["required"])
    ): String! @middleware(checks: ["auth:api"])

    verifyPaytmChecksum(
        checksum: ChecksumInput! @rules(apply: ["required"])
        checksum_verify: String! @rules(apply: ["required"])
    ): Boolean! @middleware(checks: ["auth:api"])

    createOrder(plan_id: ID! @rules(apply: ["required"])): Order!
        @middleware(checks: ["auth:api"])

    setDeviceToken(
        device_token: String! @rules(apply: ["required"])
    ): DeviceToken! @middleware(checks: ["auth:api"])

    generateQuiz(
        force: Boolean! @rules(apply: ["required"])
        quiz_info_id: ID! @rules(apply: ["required"])
    ): Quiz!
        @middleware(checks: ["auth:api"])
        @field(resolver: "App\\GraphQL\\Mutations\\GenerateQuiz@handle")

    sendPushToTopic(
        topic: String! @rules(apply: ["required"])
        data: NotificationDataInput! @rules(apply: ["required"])
    ): Boolean!
        @middleware(checks: ["auth:api"])
        @field(resolver: "App\\GraphQL\\Mutations\\SendPushToTopic@handle")
}
